const fs = require('fs');
const pool = require('../lib/utils/pool');
const request = require('supertest');
const app = require('../lib/app');
const { dummyUser } = require('./dummyData.json');
const User = require('../lib/models/user');

describe('Workout-API graphQL routes', () => {
  beforeEach(() => {
    return pool.query(fs.readFileSync('./sql/setup.sql', 'utf-8'));
  });

  it('creates a new user with graphQL', async () => {
    // const response = await graphQLcall(dummyUser)
    let response;

    expect(response).toEqual({
      ...dummyUser,
      id: expect.any(Number)
    });
  });
  it('gets a user with graphQL', async () => {
    const createdUser = await User.insert(dummyUser);

    // const response = await graphqlcall(createdUser.id)
    let response;

    expect(response).toEqual(createdUser);
  });
  it('updates a user with graphQL', async () => {
    const createdUser = await User.insert(dummyUser);

    // const response = await graphQLcall({
    //   ...createdUser,
    //   name: 'new name'
    // })
    let response;

    expect(response).toEqual({
      createdUser,
      name: 'new name'
    });
  });
  it('deletes a user with graphQL', async () => {
    const createdUser = await User.insert(dummyUser);

    // const response = await graphQLCall(createdUser.id)
    let response;

    expect(response).toEqual(createdUser);
  });
});
