const fs = require('fs');
const pool = require('../lib/utils/pool');
const request = require('supertest');
const app = require('../lib/app');
const { dummyUser, dummyWorkout, dummyW2, dummyW3 } = require('./dummyData.json');
const User = require('../lib/models/user');
const Workout = require('../lib/models/workout');

describe('Workout-API graphQL routes', () => {
  beforeEach(() => {
    return pool.query(fs.readFileSync('./sql/setup.sql', 'utf-8'));
  });

  it('creates a workout with graphql', async () => {
    const user = await User.insert(dummyUser);

    // const reponse = await graphqlcall(user.id, dummyWorkout)
    let response;

    expect(response).toEqual({
      ...dummyWorkout,
      id: expect.any(Number),
      userID: user.id
    });
  });
  it('gets all a users workouts with graphQL', async () => {
    const user = await User.insert(dummyUser);
    const user2 = await User.insert({
      name: 'fail',
      passwordHash: 'fail hash'
    });
    await Promise.all([
      Workout.insert(user.id, dummyWorkout),
      Workout.insert(user.id, dummyW2),
      Workout.insert(user2.id, dummyW3)
    ]);

    // const response = await graphqlcall(user.id)
    let response;

    expect(response).toEqual(expect.arrayContaining([
      { ...dummyWorkout, id: expect.any(Number), userID: user.id },
      { ...dummyW2, id: expect.any(Number), userID: user.id }]));

    expect(response).not.toEqual(expect.arrayContaining([{ ...dummyW3, id: expect.any(Number), userID: user2.id }]));
  });
  it('updates a workout with graphQL', async () => {
    const user = await User.insert(dummyUser);
    const createdWorkout = await Workout.insert(user.id, dummyWorkout);

    // const response = await graphqlcall({
    //   ...createdWorkout,
    //   name: 'new name',
    //   heavy: 100
    // })
    let response;

    expect(response).toEqual({
      ...dummyWorkout,
      userID: user.id,
      id: createdWorkout.id,
      name: 'new name',
      heavy: 100
    });
  });
  it('deletes a workout with graphQL', async () => {
    const user = await User.insert(dummyUser);
    const createdWorkout = await Workout.insert(user.id, dummyWorkout);

    // const response = await graphqlcall(createdWorkout.id)
    let response;

    expect(response).toEqual(createdWorkout);
  });
});
